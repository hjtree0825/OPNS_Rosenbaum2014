find_best_location <- function(num.sites, assemblers, competetors, union.rate.fn, beta, num.tries){
  #Inputs:
  #num.sites is a scaler giving the number of supplier locations to find
  #assemblers is a data.frame with x and y locations of the auto assemblers
  #competetors is a data.frame with x and y locations of the domestic-owned suppliers, our competition
  #union.rate.fn is a function that takes x and y as arguments and outputs the fraction of workforce that works in a union
  #beta is a data.frame with two elements, ``distance" and ``union". These are the linear cost parameters that determine how expensive it is for a given supplier to satesfy a given assembly plant
  #num.tries is an integer specifying the number of optimization searches I conduct
  #Output: a list containing:
  #(1) the minimum value
  #(2) the convergence status of the optimizer
  #(3) a data.frame containing the cost minimizing x and y values for the supplier locations
  
  ####Functions####
  loc_list_to_df <- 
    function(supplier.loc.list){
      as.data.frame(supplier.loc.list) %>% 
        rowid_to_column %>% 
        mutate(
          coord = ifelse(rowid %% 2, 'x', 'y'),
          rowid = (rowid - 1 - ((rowid - 1) %% 2))/2
        ) %>% 
        dcast(
          rowid ~ coord,
          value.var = 'supplier.loc.list'
        ) %>% 
        select(-rowid)
    }
  
  C_bar <- 
    function(assembly.loc, supplier.loc){
      list(
        distance = sqrt(sum((assembly.loc - supplier.loc)^2)),
        unions = union.rate.fn(supplier.loc$x, supplier.loc$y)
      ) %>% {
        beta$distance * .$distance + beta$union * .$unions    
      }
    }
  
  expected_Nr <- 
    function(assembly.loc, supplier.locs){
      supplier.locs %>% 
        by_row(
          ~{-C_bar(assembly.loc, .)},
          .collate = 'cols'
        ) %>% 
        summarise(-log(sum(exp(.out)))) %>% 
        as.numeric
    }
  
  #minimize the sum of the expected Nr
  to_minimize <- 
    function(supplier.loc.list){
      supplier.locs <-
        loc_list_to_df(supplier.loc.list)
      
      assemblers %>% 
        by_row(
          ~expected_Nr(., supplier.locs),
          .collate = 'cols'  
        ) %>% 
        summarise(sum(.out)) %>% 
        as.numeric
    }
  
  ####Analyis####
  #Try at several starting values in parallel, choose the one with the smallest value
  seq(num.tries) %>% 
    llply(
      function(l){ 
        optim(
          runif(2 * num.sites), 
          to_minimize, 
          control=list(maxit=10000)
        )
      }, 
      .parallel = TRUE
    ) %>% 
    transpose %>% {
      best.run <- 
        .$value %>% 
        unlist %>% {
          . == min(.)
        } %>% 
        which %>% {
          .[1]
        }
      
      .$par[best.run] %>% 
        unlist %>% 
        loc_list_to_df
    }
}